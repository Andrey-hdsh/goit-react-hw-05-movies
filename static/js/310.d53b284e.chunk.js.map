{"version":3,"file":"static/js/310.d53b284e.chunk.js","mappings":"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","sources":["components/API.js","components/Loader/Loader.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY_API = 'c6abe789c2cce447fb640bf7c33e7b21';\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(\n      `3/trending/all/week?api_key=${KEY_API}&include_adult=false&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchQuery = async query => {\n  try {\n    const response = await axios.get(\n      `3/search/movie?api_key=${KEY_API}&query=${query}&include_adult=false&language=en-US`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieDetails = async id => {\n  try {\n    const response = await axios.get(\n      `3/movie/${id}?api_key=${KEY_API}&append_to_response=videos,images,credits&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieCredits = async id => {\n  try {\n    const response = await axios.get(\n      `3/movie/${id}/credits?api_key=${KEY_API}&append_to_response=videos,images,credits&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieReviews = async id => {\n  try {\n    const response = await axios.get(\n      `3/movie/${id}/reviews?api_key=${KEY_API}&append_to_response=videos,images,credits&language=en-US`\n    );\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n","import { Circles } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <Circles\n      height=\"160\"\n      width=\"160\"\n      color=\"#61d0a9\"\n      ariaLabel=\"circles-loading\"\n      wrapperStyle={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n};\n\nexport default Loader;","import React, { useState, useEffect } from 'react';\nimport { fetchQuery } from '../../components/API';\nimport toast, { Toaster } from 'react-hot-toast';\nimport Loader  from 'components/Loader/Loader';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport './movies.css'\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [error ,setError] = useState(false);\n  const location = useLocation();\n\n  const [serchParams, setSerchParams] = useSearchParams();\n\n  const paramsUrl = serchParams.get('query') || '';\n\n  useEffect(() => {\n    const getSearchData = async () => {\n      try {\n        if (paramsUrl !== '') {\n          setLoading(true);\n          setError(false);\n\n          const resultQuery = await fetchQuery(paramsUrl);\n\n          if (!resultQuery.length) {\n            toast.error(\n              'Sorry,there are no films for this request. Try something different.'\n            );\n          }\n          setMovies(resultQuery);\n        }\n      } catch (error) {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getSearchData();\n  }, [paramsUrl , setError ]);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const targetQuery = evt.target.query.value.trim();\n    if (targetQuery === '') {\n      toast.error('Please enter your request!');\n    }\n    setSerchParams({ query: targetQuery });\n    evt.target.reset();\n  \n  };\n\n  return (\n    <div className='container-movie'>\n      <form onSubmit={handleSubmit} className='search-form'>\n        <button type=\"submit\">Search</button>\n        <input name=\"query\" type=\"text\" autoFocus placeholder=\"Search movies\" />\n      </form>\n\n      <div className=\"list\">\n        {isLoading && <Loader />}\n\n        {movies.map(movie => (\n            <Link to={`/movies/${movie.id}`}\n              state={{ from: location }}\n              key={movie.id}\n              className=\"movie-item\"\n            >\n              {movie.poster_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n                  alt={movie.title}\n                />\n              ) : (!error &&\n                <p>No Poster Available</p>\n              )}\n              <h3>{movie.title}</h3>\n            </Link>\n          \n        ))}\n      </div>\n\n      <Toaster position=\"top-right\" />\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["KEY_API","axios","fetchTrendingMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","concat","sent","abrupt","data","t0","stop","apply","arguments","fetchQuery","_ref2","_callee2","query","_context2","results","console","log","_x","fetchMovieDetails","_ref3","_callee3","id","_context3","_x2","fetchMovieCredits","_ref4","_callee4","_context4","cast","_x3","fetchMovieReviews","_ref5","_callee5","_context5","_x4","_jsx","Circles","height","width","color","ariaLabel","wrapperStyle","position","top","left","transform","wrapperClass","visible","_useState","useState","_useState2","_slicedToArray","movies","setMovies","_useState3","_useState4","isLoading","setLoading","_useState5","_useState6","error","setError","location","useLocation","_useSearchParams","useSearchParams","_useSearchParams2","serchParams","setSerchParams","paramsUrl","get","useEffect","getSearchData","resultQuery","length","toast","finish","_jsxs","className","children","onSubmit","evt","preventDefault","targetQuery","target","value","trim","reset","type","name","autoFocus","placeholder","Loader","map","movie","Link","to","state","from","poster_path","src","alt","title","Toaster"],"sourceRoot":""}